version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: djangodb
      POSTGRES_USER: django
      POSTGRES_PASSWORD: ChangeMe123!
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U django -d djangodb"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://django:ChangeMe123!@postgres:5432/djangodb
      - REDIS_URL=redis://redis:6379/0
      - USER_SERVICE_URL=http://user-service:8001
      - PRODUCT_SERVICE_URL=http://product-service:8002
      - ORDER_SERVICE_URL=http://order-service:8003
      - NOTIFICATION_SERVICE_URL=http://notification-service:8004
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
      product-service:
        condition: service_started
      order-service:
        condition: service_started
      notification-service:
        condition: service_started
    volumes:
      - ./microservices/api-gateway:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  # User Service
  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://django:ChangeMe123!@postgres:5432/djangodb
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./microservices/user-service:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8001"

  # Product Service
  product-service:
    build:
      context: ./microservices/product-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://django:ChangeMe123!@postgres:5432/djangodb
      - REDIS_URL=redis://redis:6379/2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./microservices/product-service:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8002"

  # Order Service
  order-service:
    build:
      context: ./microservices/order-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://django:ChangeMe123!@postgres:5432/djangodb
      - REDIS_URL=redis://redis:6379/3
      - USER_SERVICE_URL=http://user-service:8001
      - PRODUCT_SERVICE_URL=http://product-service:8002
      - NOTIFICATION_SERVICE_URL=http://notification-service:8004
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
      product-service:
        condition: service_started
      notification-service:
        condition: service_started
    volumes:
      - ./microservices/order-service:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8003"

  # Notification Service
  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://django:ChangeMe123!@postgres:5432/djangodb
      - REDIS_URL=redis://redis:6379/4
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./microservices/notification-service:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8004"

  # Nginx Load Balancer (Optional for local testing)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-gateway
      - user-service
      - product-service
      - order-service
      - notification-service

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge 